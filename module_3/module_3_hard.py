data_structure = [
    [1, 2, 3],
    {'a': 4, 'b': 5},
    (6, {'cube': 7, 'drum': 8}),
    "Hello",
    ((), [{(2, 'Urban', ('Urban2', 35))}])
]


def calculate_structure_sum(args):
    sum_ = 0
    # будем заставлять функцию обращаться к себе
    # пока среди аргументов функции не закончатся кортежи, словари, множества и списки с элементами этих же типов данных
    # собрав пирамиду из всех аргументов функции, она начнет ее разбирать и суммировать все значения в обратном порядке
    if isinstance(args, list): # если аргумент функции - список
#        print('переберем каждый элемент списка:', args, '\n (если список состоит не из числа или строки - углубляемся)')
        for l in args: # перебираем каждый элемент списка
            sum_ += calculate_structure_sum(l) # добавляем значение каждого элемента списка к общей сумме
#            print('добавили значения каждого элемента списка к общей сумме:', sum_)
    if isinstance(args, int): # если аргумент функции - число
#        print('дошли до целого числа:',args)
        sum_ += args # добавляем число к общей сумме
#        print('добавим число к общей сумме, получим:', sum_)
    if isinstance(args, dict): # если аргумент функции - словарь
#        print('дошли до словаря:', args)
#        print('переберем ключи словаря:', args.keys())
        for k in args.keys(): # перебираем каждый ключ словаря
            sum_ = sum_ + calculate_structure_sum(k) # добавляем каждое значение ключа словаря к общей сумме
#        print('переберем значения словаря:', args.values())
        for v in args.values(): # перебираем каждое значение словаря
            sum_ = sum_ + calculate_structure_sum(v) # добавляем каждое значение словаря к общей сумме
#        print('посчитали все элементы словаря', sum_)
    if isinstance(args, str): # если аргумент функции - строка
#        print('дошли до строки:', args)
        sum_ = sum_ + len(args) # добавляем количество символов строки к общей сумме
#        print('добавили количество символов строки к общей сумме', sum_)
    if isinstance(args, tuple): # если аргумент функции - кортеж
#        print('дошли до кортежа:', args, '\n (если кортеж состоит не из числа или строки - углубляемся)')
        for t in args: # перебираем каждый элемент кортежа
            sum_ += calculate_structure_sum(t) # добавляем каждый элемент кортежа к общей сумме
#            print('добавили элементы кортежа к общей сумме', sum_)
    if isinstance(args, set): # если аргумент функции - множество
#        print('дошли до множества:', args, '\n (если множество состоит не из числа или строки - углубляемся)')
        for s in args: # перебираем каждый элемент множества
            sum_ += calculate_structure_sum(s) # добавляем каждый элемент множества к общей сумме
#            print('добавили элементы множества к общей сумме', sum_)

    return sum_

result = calculate_structure_sum(data_structure)
print(result)