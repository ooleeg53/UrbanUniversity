class Animal: # создали класс "животное"
    def __init__(self,name): # вызвали метод инициализирующий атрибуты объекта
        self.alive = True # добавили атрибут "живой" со значением "правда"
        self.fed = False # добавили атрибут "накормленный" со значением "ложь"
        self.name = name # добавили атрибут "имя животного"

    def eat(self, food): # добавили метод "еда", в котором ч/з параметр food принимаются объекты класса plant
        if food.edible: # ставим условие если "еда" "съедобная", то
            print(f'{self.name} съел {food.name}') # выводится сообщение
            self.fed = True # атрибут "накормленный" меняет значение на "правда"
        else: # в ином случае
            print(f'{self.name} не стал есть {food.name}') # выводим сообщение
            self.alive = False # атрибут "живой" меняет значение на "ложь"


class Plant: # создали класс "растение"
    def __init__(self,name): # вызвали метод инициализирующий атрибуты объекта
        self.edible = False # добавили атрибут "съедобность"
        self.name = name # добавили атрибут "имя растения"


class Mammal(Animal): # создали класс наследника "млекопитающее" для класса "животное"
    pass # заглушка, для соблюдения синтаксиса языка


class Predator(Animal): # создали класс наследника "хищник" для класса "животное"
    ... # это тоже заглушка, работает в версии питона 3+


class Flower(Plant): # создали класс наследника "цветок" для класса "растение"
    pass # и это глушим, по условию ничего не требуется менять для объекта этого класса


class Fruit(Plant): # создали класс наследника "фрукт" для класса "растение"
    def __init__(self, name): # вызвали метод инициализирующий атрибуты объекта
        super().__init__(name) # с помощью функции супер вызываем атрибут "имя растения", чтобы не создавать атрибут имя
        self.edible = True # для каждого объекта класса "фрукт" переопределили значение атрибута "съедобность"


a1 = Predator('Волк с Уолл-Стрит')
a2 = Mammal('Хатико')
p1 = Flower('Цветик семицветик')
p2 = Fruit('Заводной апельсин')
print(a1.name)
print(p1.name)
print(a1.alive)
print(a2.fed)
a1.eat(p1)
a2.eat(p2)
print(a1.alive)
print(a2.fed)
